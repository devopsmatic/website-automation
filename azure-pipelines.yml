trigger:
  branches:
    include:
      - main  # Adjust this if your main branch is different

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureResourceGroup: 'fastrackcloud-rg'
  azureLocation: 'eastus2'
  containerAppName: 'fastrackcloud-app'
  containerAppEnvironment: 'fastrackcloud-env'
  containerRegistry: 'docker.io'
  dockerImageName: 'fastrackcloud/website-automation'
  dockerImageTag: 'latest'
  containerPort: 80
  httpsPort: 443
  containerInstanceCount: 2
  certbotEmail: 'admin@fastrackcloud.com'
  domain1: 'www.fastrackcloud.com'
  domain2: 'fastrackcloud.com'

stages:
  - stage: Build
    displayName: "Build and Push Docker Image"
    jobs:
      - job: BuildDockerImage
        displayName: "Build and Push Docker Image to DockerHub"
        steps:
          - task: Docker@2
            displayName: "Log in to DockerHub"
            inputs:
              command: login
              containerRegistry: dockerhub-creds  # Ensure this matches your service connection name

          - task: Docker@2
            displayName: "Build Docker Image"
            inputs:
              command: build
              dockerfile: "$(Build.SourcesDirectory)/Dockerfile"
              buildContext: "$(Build.SourcesDirectory)"
              repository: "$(dockerImageName)"
              tags: "$(dockerImageTag)"

          - task: Docker@2
            displayName: "Push Docker Image to DockerHub"
            inputs:
              command: push
              repository: "$(dockerImageName)"
              tags: "$(dockerImageTag)"

  - stage: Deploy
    displayName: "Deploy to Azure Container Apps"
    dependsOn: Build
    jobs:
      - job: DeployToAzure
        displayName: "Deploy Containers to Azure"
        steps:
          - task: AzureCLI@2
            displayName: "Create Container Apps Environment (if not exists)"
            inputs:
              azureSubscription: "azure-creds"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "Checking if Azure Container Apps Environment exists..."
                envExists=$(az containerapp env list --resource-group $(azureResourceGroup) --query "[?name=='$(containerAppEnvironment)'].name" -o tsv)

                if [ -z "$envExists" ]; then
                  echo "Environment does not exist. Creating..."
                  az containerapp env create \
                    --name $(containerAppEnvironment) \
                    --resource-group $(azureResourceGroup) \
                    --location $(azureLocation)
                else
                  echo "Environment already exists."
                fi

          - task: AzureCLI@2
            displayName: "Deploy Azure Container App"
            inputs:
              azureSubscription: "azure-creds"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "Deploying Azure Container App..."
                az containerapp create \
                  --name $(containerAppName) \
                  --resource-group $(azureResourceGroup) \
                  --environment $(containerAppEnvironment) \
                  --image $(containerRegistry)/$(dockerImageName):$(dockerImageTag) \
                  --ingress external \
                  --target-port 80 \
                  --target-port 443 \
                  --min-replicas $(containerInstanceCount) \
                  --max-replicas $(containerInstanceCount)

  - stage: ConfigureSSL
    displayName: "Configure SSL with Certbot"
    dependsOn: Deploy
    jobs:
      - job: EnableSSL
        displayName: "Run Certbot Inside the Container"
        steps:
          - task: AzureCLI@2
            displayName: "Trigger Certbot Execution in the Container"
            inputs:
              azureSubscription: "azure-creds"
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "Enabling Certbot execution inside the container..."
                
                az containerapp update \
                  --name $(containerAppName) \
                  --resource-group $(azureResourceGroup) \
                  --set-env-vars "RUN_CERTBOT=true"

                echo "Waiting for Certbot to complete..."
                sleep 60  # Wait for Certbot execution inside the container

                echo "Setting up Auto-Renewal Every 60 Days..."
                az containerapp update \
                  --name $(containerAppName) \
                  --resource-group $(azureResourceGroup) \
                  --set-env-vars "CERTBOT_RENEWAL=true"
